{
  "translation": {
    "project": {
      "title": "Team Project 2: WORK OUT Implementation Details",
      "description": "This document details the technical decisions and implementation methods of key features developed for the WORK OUT project.",
      "architecture": {
        "title": "1. Project Structure Design (Architecture)",
        "description": "We designed an architecture that emphasizes clear role division for maintainability and scalability of the project.",
        "layers": {
          "controller": "Layer Structure",
          "controller.description": "We adopted a basic '3-Tier Architecture' that clearly divides roles into `Controller` for receiving web requests, `Service` for processing core business logic, and `Repository` for database access. This makes each part's responsibilities clear and minimizes the impact of code changes on other parts.",
          "service": "Service Layer",
          "service.description": "The `Service` layer receives requests from the `Controller`, performs core business logic, and interacts with the `Repository`. It handles transaction management and complex data processing to implement the application's core functionalities.",
          "repository": "Repository Layer",
          "repository.description": "The `Repository` layer is responsible for direct interaction with the database. It uses `JPA` to perform data retrieval, saving, updating, and deleting, and provides an abstracted data access interface to the service layer."
        },
        "diagram": "Architecture Diagram",
        "diagram.description": "`3-Tier Architecture`: `Controller` - `Service` - `Repository`\n`Entity` inherits from `BaseEntity`, `DTO` is used for data transfer between layers"
      },
      "dataModeling": {
        "title": "2. Data Modeling",
        "description": "We designed the database schema focusing on the core functions of the service.",
        "entityOverview": "Overview of Main Entities and Relationships",
        "relationship": "Relationship Design",
        "relationship.description": "relationships (e.g., one post linked to multiple images/comments), Many-to-One (N:1) relationships (multiple posts referencing one author), etc. were designed to fit the actual service flow.",
        "inheritance": "Inheritance Utilization",
        "baseEntity": "`BaseEntity`",
        "inheritance.description": "Inheritance efficiently manages common fields like creation and modification timestamps, reducing code duplication.",
        "otherCommonFields": "In addition to creation and modification timestamps, other common fields such as deletion flags or status codes can be added as needed.",
        "otherFields": "Besides images and comment relationships, additional fields like tags, categories, likes, etc. can be defined as needed.",
        "mappedSuperclass": "Used as a parent class for inheritance mapping in JPA. It doesn't create an actual table but provides mapping information to child entity classes.",
        "entityListeners": "Specifies listeners that detect entity lifecycle events and call callback methods. AuditingEntityListener automatically manages creation and modification timestamps.",
        "createdDate": "Marks a field that automatically stores the current time when an entity is created. Uses Spring Data JPA Auditing feature.",
        "lastModifiedDate": "Marks a field that automatically updates to the current time when an entity is modified. Uses Spring Data JPA Auditing feature.",
        "entity": "Indicates that this class is a JPA entity and is mapped to a connected database table.",
        "id": "Marks the primary key of the entity.",
        "generatedValue": "Specifies the strategy for generating primary key values. The default value is AUTO, which chooses an appropriate strategy based on the database.",
        "manyToOne": "Sets up a Many-to-One (N:1) relationship. Used when multiple entities reference a single entity.",
        "oneToMany": "Sets up a One-to-Many (1:N) relationship. Used when a single entity references multiple entities.",
        "mappedBy": "In a bidirectional relationship, specifies the owner from the non-owning side. Here, the board field in the Board entity is the owner of the relationship."
      },
      "realTimeVideo": {
        "title": "3.1 Real-time Video Call System (WebRTC & WebSocket)",
        "goal": "Goal",
        "feature1": "Provide an environment where trainers and members can check exercise postures and exchange feedback in real-time online.",
        "feature2": "Support not only 1:1 PT but also 1:N exercise sessions with multiple participants.",
        "implementation": "Implementation Approach",
        "implementation.step1": "We implemented direct P2P transmission of real-time audio and video data between browsers based on WebRTC technology.",
        "implementation.step2": "The exchange of connection information, i.e., signaling, was handled using WebSocket and STOMP protocol.",
        "implementation.step3": "On the frontend side, WebRTC and WebSocket related logic was handled through the videoCall.js file on pages such as roomList.html, roomCreate.html, and room.html, while the backend was built on the Spring Boot framework with WebSocketConfig, Controller, Service, and database integration to reliably support the entire system.",
        "issues": "Issues",
        "issues.issue1": "We faced several technical challenges when implementing these features.",
        "issues.issue2": "First, both WebRTC and WebSocket protocols react sensitively to the browser's Same-Origin Policy (SOP) and CORS (Cross-Origin Resource Sharing) policy, resulting in unexpected connection blocking due to certain security headers (e.g., CSRF token settings).",
        "issues.issue3": "Also, for security reasons, WebRTC APIs like getUserMedia that access user media devices only work properly in HTTPS environments, making it essential to set up HTTPS from the development and testing stages.",
        "solutions": "Solutions",
        "solutions.solution1": "To solve these problems, we applied the following approaches:",
        "solutions.solution2": "First, to resolve browser connection blocking, we explicitly specified allowed origins, HTTP methods, and headers related to CORS in the backend's Spring Security settings, and finely adjusted SockJS library options to additionally resolve header-related issues that could occur during WebSocket connections.",
        "solutions.solution3": "Second, to ensure WebRTC API compatibility and enhance transmission data security, we mandatorily applied the HTTPS protocol to both development and production environments.",
        "frontendLogic": "Frontend Core Logic (`videoCall.js`)",
        "frontendLogic.description": "Following is part of the frontend JavaScript code that handles core logic such as WebRTC connection setup, signaling message processing, and video stream management.",
        "demoImage": "Figure 1: Demo image of WebRTC-based real-time video training (example)",
        "startDemo": "Start WebRTC Demo",
        "endDemo": "Close Demo"
      },
      "boardSystem": {
        "title": "3.2 Board System (Free Board & Exercise Board)",
        "goal": "Goal",
        "description": "The goal of this system is to provide a community space (free board, exercise board) where users can freely write and share various information.",
        "implementation": "Implementation Approach",
        "implementation.step1": "To implement this, we developed not only basic post CRUD (create, read, update, delete) functions based on the Spring MVC pattern (Controller-Service-Repository layer structure), but also file uploads, comment management, and paging and search features.",
        "implementation.step2": "In particular, we introduced and utilized the QueryDSL library to support dynamic query generation and efficient paging processing based on various conditions.",
        "potentialIssues": "Potential Issues",
        "issue1": "However, we considered potential issues that could arise in the future during implementation.",
        "issue2": "For example, there was the possibility of reduced query performance if a large amount of data accumulates on the bulletin board, and the need to optimize database queries as user search conditions become more complex.",
        "solutions": "Solutions",
        "solution1": "To proactively respond to these potential issues and secure system performance, we applied the following solutions:",
        "solution2": "First, we actively utilized QueryDSL to improve search performance by implementing optimized dynamic queries even for complex and diverse search conditions.",
        "carousel": {
          "boardList": "Figure 1: Board list and paging",
          "boardView": "Figure 2: Post view",
          "boardWrite": "Figure 3: Post creation and file attachment",
          "boardSearch": "Figure 4: Board search function"
        }
      },
      "queryDsl": {
        "title": "QueryDSL Usage Pattern Summary: Dynamic/Complex Condition Processing",
        "description": "We adopted a method of combining QueryDSL's JPQLQuery and BooleanBuilder to efficiently implement complex search functionality for the bulletin board system.",
        "additionalDescription": "In particular, we introduced and utilized the QueryDSL library to support dynamic query generation and efficient paging processing according to various conditions.",
        "codeExample1": "Code Example 1: Basic Query and Condition Addition Based on JPQLQuery",
        "codeExample2": "Code Example 2: Dynamic Condition Creation and Application Using BooleanBuilder",
        "introduction": "First, the basic query structure was written based on the JPQLQuery object. We used the from() method to specify the main target of the query, and used methods such as leftJoin() to join related entities when additional data was needed. Basic conditions that are relatively simple or fixed, such as search keyword input, were added directly to the where() clause of JPQLQuery.",
        "booleanBuilder": "However, complex conditions that need to be dynamically changed according to requests, such as user search type selection (e.g., search by title, search by content, search by author, etc.) or combinations of multiple filter conditions, were configured using BooleanBuilder. BooleanBuilder played a role in dynamically creating the final complex condition by flexibly connecting individual conditions (Predicates) with and or or methods according to business logic. These dynamic conditions created through BooleanBuilder were eventually integrated into the where() clause of the JPQLQuery object, enabling optimized queries in a completed form to be delivered to the database at execution time.",
        "comments": {
          "boardSearch.qBoardComment": "Create a QBoard object to prepare for type-safe query writing.",
          "boardSearch.queryComment": "Create a JPQLQuery object and set the basic FROM clause.",
          "boardSearch.basicCondition": "If the keyword exists and is not empty, add a condition where the title contains the keyword.",
          "boardSearch.dynamicCondition": "Add a basic condition where the board number (bno) is greater than 0L. (Example: target all posts)",
          "booleanBuilder.comment1": "Create a BooleanBuilder object to combine dynamic conditions.",
          "booleanBuilder.comment2": "Split the search type string (e.g., 'tcw') into individual characters.",
          "booleanBuilder.comment3": "If the search type and keyword are valid, create an inner BooleanBuilder to group OR conditions.",
          "booleanBuilder.comment4": "'t': Add a condition where the title contains the keyword using OR.",
          "booleanBuilder.comment5": "'c': Add a condition where the content contains the keyword using OR.",
          "booleanBuilder.comment6": "'w': Add a condition where the writer's username contains the keyword using OR.",
          "booleanBuilder.comment7": "Combine the internally OR-ed conditions with the main BooleanBuilder using AND.",
          "booleanBuilder.comment8": "Skip this block if search type/keyword is missing.",
          "booleanBuilder.comment9": "Apply the finally constructed BooleanBuilder condition to the WHERE clause of the JPQLQuery."
        }
      },
      "memberManagement": {
        "title": "3.3 Member Management System (Member)",
        "goal": "Goal",
        "feature1": "Provide secure and convenient authentication, authorization, information modification, and permission management functions.",
        "feature2": "Implement UI/UX with user experience as the top priority.",
        "implementation": "Implementation Approach",
        "implementation.step1": "We implemented authentication and authorization functions based on Spring Security, loaded user information through CustomUserDetailsService, and encrypted passwords using the BCrypt algorithm. Additionally, we applied detailed permission management functions based on roles.",
        "implementation.step2": "Additionally, we implemented ID duplication check and selective update of only necessary fields when modifying member information.",
        "issues": "Issues",
        "issue1": "During implementation, we needed to prepare countermeasures for common web security vulnerabilities such as session management and CSRF (Cross-Site Request Forgery) attacks.",
        "issue2": "Also, maintaining data consistency and accuracy, i.e., data integrity, was an important task when members changed their information.",
        "solutions": "Solutions",
        "solution1": "By utilizing the built-in functions provided by Spring Security, we appropriately configured session management policies, cookie settings, CSRF defense, CORS (Cross-Origin Resource Sharing) policies, etc. to enhance system security levels.",
        "solution2": "To ensure data integrity, we used the DTO (Data Transfer Object) pattern when receiving data from clients and applied data validation logic on the server side to prevent incorrect data from being entered into the system.",
        "security": "Security and Data Integrity Implementation Details",
        "sessionManagement": "1. Session Management",
        "sessionManagement.step1": "We managed user authentication status by storing member information in HttpSession upon successful login and invalidating the session upon logout.",
        "sessionManagement.step2": "To prevent session fixation attacks, we applied settings to automatically change the session ID upon successful authentication.",
        "sessionManagement.step3": "We limited the number of simultaneous sessions per account to reduce security risks due to multiple logins.",
        "csrf": "2. CSRF (Cross-Site Request Forgery) Response",
        "csrf.step1": "We activated Spring Security's CSRF defense function to apply CSRF token verification to all state change requests (POST, PUT, DELETE, etc.).",
        "csrf.step2": "Only specific paths such as login or registration were exempted from CSRF verification.",
        "csrf.step3": "We implemented CSRF token inclusion in all HTML forms and AJAX requests.",
        "dataConsistency": "3. Data Integrity When Changing Member Information",
        "dataConsistency.step1": "When modifying member information, we applied a method of selectively updating only changed fields to prevent unnecessary data changes or loss.",
        "dataConsistency.step2": "We defined change methods for each field within the domain object to allow data to be changed in a consistent manner.",
        "dataConsistency.step3": "We verified data validity from the DTO stage using Bean Validation annotations.",
        "otherSecurity": "4. Other Security Settings",
        "otherSecurity.step1": "We added security-related headers to HTTP responses to prevent attacks such as XSS (Cross-Site Scripting) and clickjacking.",
        "otherSecurity.step2": "We applied HttpOnly and SameSite attributes to all cookies to make it difficult to steal cookies or use them maliciously.",
        "otherSecurity.step3": "We added permission verification through @PreAuthorize for sensitive tasks such as membership withdrawal to limit execution to the person themselves.",
        "mainScreen": "Main Member Management Screens",
        "mainScreen.description": "Main screens of the member management system, allowing you to check from the login screen to the mypage and member information modification.",
        "mainScreen.carousel": {
          "login": "Figure 1: Login screen - Spring Security-based authentication",
          "join": "Figure 2: Registration screen - Validation and duplication check",
          "mypage": "Figure 3: My page - Member information check and management"
        },
        "comments": {
          "security.comment1": "Set the redirection URL to '/member/login?expired' upon session expiration.",
          "security.comment2": "Disable CSRF protection for specific paths ('/member/login', '/member/join', etc.).",
          "security.comment3": "Service method for updating member information."
        },
        "findExistingMember": "Query existing member information (throws an exception if not found)",
        "passwordEncryption": "Password encryption processing when changing passwords",
        "selectiveUpdate": "Selectively update only changed fields",
        "otherFieldsUpdate": "Update other fields",
        "transactionSave": "Save within a transaction",
        "enableMethodSecurity": "Use @EnableMethodSecurity in newer versions",
        "pathAccessControl": "Add path-specific access control as needed",
        "exceptionHandlers": "Add access denial/authentication failure handlers as needed"
      },
      "qnaSystem": {
        "title": "3.4 Q&A System",
        "description": "The Q&A system provides a platform for users to ask questions and receive answers about exercise techniques, training programs, and other fitness-related topics.",
        "additionalDescription": "We designed this system to facilitate knowledge sharing between trainers and members, creating a valuable knowledge base over time.",
        "userRequirement": "Users wanted an intuitive interface to post questions with images for better explanations of their exercise concerns.",
        "implementation": "We implemented the Q&A system with full CRUD functionality, file upload capabilities, and a responsive design that works well on both desktop and mobile devices.",
        
        "fileUploadTitle": "File Upload Implementation",
        "fileUpload": {
          "controller": "File Upload Controller Implementation",
          "description": "We implemented a controller that handles multipart form data for file uploads, supporting multiple image attachments per question.",
          "step1": "We used Spring's MultipartFile API to process uploaded files, validating file types and sizes before storage.",
          "step2": "Each uploaded file is given a unique identifier to prevent naming conflicts and ensure reliable retrieval.",
          "step3": "The controller associates uploaded files with the corresponding question entity through a database relationship."
        },
        
        "fileStorageTitle": "File Storage Implementation",
        "fileStorage": {
          "description": "For file storage, we implemented a service layer that manages the physical storage of files on the server.",
          "step1": "Files are stored in a configurable directory specified in the application properties.",
          "step2": "We use UUID-based naming to ensure uniqueness and prevent path traversal attacks.",
          "step3": "Each file's metadata (original name, size, content type) is stored in the database for easy retrieval and management."
        },
        
        "fileAccessTitle": "File Access Implementation",
        "fileAccess": {
          "description": "To provide secure access to uploaded files, we implemented a dedicated endpoint for file retrieval.",
          "step1": "Files are accessed by their unique ID rather than direct file paths, adding a layer of security.",
          "step2": "The system determines the appropriate content type for each file dynamically based on its extension.",
          "step3": "Access control ensures that only authorized users can access certain files if needed (e.g., in case of private questions).",
          "getImageResource": "Call the service to retrieve the image resource",
          "determineMimeType": "Determine the MIME type of the resource",
          "returnImageResource": "Return image resource and Content-Type header",
          "notFoundResponse": "404 response",
          "serverErrorResponse": "500 response"
        },
        
        "frontendTitle": "Frontend Implementation",
        "frontend": {
          "description": "The frontend implementation focuses on a user-friendly experience with drag-and-drop file uploads and image previews.",
          "step1": "We implemented a drag-and-drop zone that allows users to easily attach images to their questions.",
          "step2": "Image previews are shown before submission, allowing users to verify their attachments.",
          "step3": "The form handles validation both on the client side (for immediate feedback) and server side (for security).",
          "successProcessing": "Processing on success",
          "registrationError": "An error occurred during registration"
        },
        
        "carousel": {
          "qnaList": "Figure 1: Q&A list with search and filtering",
          "qnaWrite": "Figure 2: Question submission form with image upload",
          "qnaView": "Figure 3: Question detail view with answers"
        },
        "comments": {
          "fileUpload.comment2": "Perform validation check if QnA title is empty and return an error response.",
          "fileUpload.comment3": "Call the QnA service's register method to register QnA information along with attached files.",
          "fileUpload.comment4": "Upon successful registration, return an HTTP 200 OK response including the saved QnaDTO object.",
          "uploadConfig.comment1": "Inject the value of the 'org.zerock.upload.path' property from application.properties or application.yml.",
          "uploadConfig.comment2": "During bean initialization (@PostConstruct), check if the upload path exists and create it if not.",
          "fileStorage.comment1": "Ensure atomicity by wrapping the entire method in a single transaction.",
          "fileStorage.comment2": "Create a Qna entity from QnaDTO and save it to the database.",
          "fileStorage.comment3": "Start processing logic if attached image files exist.",
          "fileStorage.comment4": "Extract the extension from the original filename and generate a unique stored filename using UUID.",
          "fileStorage.comment5": "Use the MultipartFile object's transferTo method to actually save the file to the specified path.",
          "fileStorage.comment6": "Create a QnaImage entity based on the saved filename.",
          "fileStorage.comment7": "Add the created QnaImage entity to the Qna entity's image list (JPA relationship setting).",
          "fileStorage.comment8": "Save the Qna entity again with the added image information to reflect changes in the database.",
          "fileStorage.comment9": "Convert the finally saved Qna entity to QnaDTO and return it.",
          "fileAccess.comment1": "GET request handler for retrieving the image file corresponding to a specific image ID.",
          "fileAccess.comment2": "Service method to retrieve the image resource based on the image ID.",
          "fileAccess.comment3": "Use QnaImageRepository to retrieve the QnaImage entity by image ID. Throws EntityNotFoundException if not found.",
          "fileAccess.comment4": "Combine the configured upload path and image filename to create the actual file Path object.",
          "fileAccess.comment5": "Convert the file path to URI, create a UrlResource object to represent the resource. Check if the file exists and is readable.",
          "frontend.comment1": "Register the form submission event listener.",
          "frontend.comment2": "Prevent the default form submission behavior (page refresh).",
          "frontend.comment3": "Create a FormData object to hold form data including files.",
          "frontend.comment4": "Append text input field values (title, content) to FormData.",
          "frontend.comment5": "Append all selected files from the file input (imageFiles) to FormData.",
          "frontend.comment6": "Get the CSRF token and header name from Thymeleaf variables or JavaScript variables.",
          "frontend.comment7": "Send a POST request to '/qna/api/register' using the fetch API. Include FormData and CSRF header.",
          "frontend.comment8": "Upon successful registration, redirect to the QnA detail view page using the returned qno.",
          "frontend.comment9": "Function to update the image preview when files are selected.",
          "frontend.comment10": "Clear the existing preview content.",
          "frontend.comment11": "For each file, use FileReader to read image data and create preview elements to display on the screen.",
          "frontend.comment12": "Current logged-in user information (null in this example)."
        }
      },
      "commonComponents": {
        "title": "Common Components and Configuration",
        "goal": "Goal",
        "description": "To improve code reusability and maintainability, we designed and implemented common components and configurations that can be used throughout the application.",
        "implementation": "Implementation Approach",
        "additionalDescription": "We created utility classes, custom annotations, aspect-oriented programming components, and configuration classes that can be used across the entire application.",
        "keyFeatures": "Key Features",
        "keyFeaturesDescription": "The common components provide consistent error handling, security configurations, resource management, and more to ensure a uniform user experience and code standard.",
        "solution": "We improved this by separating environment-specific configuration files like `application` and utilizing Spring profile functionality to systematically manage and apply settings appropriate for each environment.",
        "mainComponents": "Main Common Components",
        "webMvcConfig": "WebMvcConfig",
        "webMvcConfig.step1": "We implemented WebMvcConfig to customize Spring MVC's behavior, including resource handling, interceptors, and view resolvers.",
        "webMvcConfig.cacheDisable": "Disable favicon cache. (For reflecting changes immediately during development)",
        "customSecurityConfig": "CustomSecurityConfig",
        "customSecurityConfig.step1": "We created a security configuration that provides authentication, authorization, and various security features to protect our application.",
        "webSocketConfig": "WebSocketConfig",
        "webSocketConfig.step1": "We implemented WebSocketConfig to enable real-time communication between clients and the server for features like live notifications and chat.",
        "uploadConfig": "UploadConfig",
        "uploadConfig.step1": "We created a configuration for file uploads that manages storage locations, file size limitations, and allowed file types.",
        "globalExceptionHandler": "GlobalExceptionHandler",
        "globalExceptionHandler.step1": "We implemented a centralized error handling mechanism that catches exceptions throughout the application.",
        "globalExceptionHandler.step2": "Each type of exception is handled appropriately, providing meaningful error messages to the users.",
        "globalExceptionHandler.step3": "This ensures a consistent error response format across the entire application.",
        "customErrorController": "CustomErrorController",
        "customErrorController.step1": "We created a custom error controller that handles HTTP error status codes like 404 (Not Found) or 500 (Internal Server Error) in a user-friendly way.",
        "thymeleaf": "Thymeleaf Configuration",
        "thymeleaf.step1": "We configured Thymeleaf as our template engine with custom dialects and fragment handling to create a consistent UI across the application.",
        "environmentalManagement": "Managing settings for different environments (development, testing, production, etc.) can become complex as project environments diversify.",
        "inconsistentUserExperience": "When unexpected errors occur, showing unclear or inconsistent error messages to users can degrade the user experience.",
        "configurationManagement": "Configuration Management",
        "errorHandling": "Error Handling",
        "concerns": "Concerns and Solutions",
        "environmentalProblem": "Managing different configurations for various environments (development, testing, production, etc.) can be cumbersome.",
        "environmentalSolution": "We improved this by separating configuration files like `application` for each environment and utilizing Spring profiles to systematically manage and apply appropriate settings for each environment.",
        "userExperienceProblem": "When unexpected errors occur, showing unclear or inconsistent error messages to users can degrade the service experience.",
        "userExperienceSolution": "We introduced `@RestControllerAdvice` and `ErrorController` to consistently handle exceptions throughout the application and provide users with easy-to-understand, standardized error feedback, maintaining a stable user experience.",
        "comments": {
          "webMvcConfig.cacheDisable": "Disable favicon cache. (For reflecting changes immediately during development)"
        }
      },
      "developmentEnvironment": {
        "title": "Development Environment",
        "description": "The following is a summary of the development environment and tools used to build the WORK OUT project.",
        "technology": "Technology Stack",
        "springBoot": "Spring Boot",
        "springBootDescription": "for rapid development environment setup",
        "gradle": "Gradle",
        "gradleDescription": "for dependency and build automation",
        "java": "Java 17",
        "javaDescription": "for stable server implementation",
        "staticResources": "Static Resources",
        "staticResourcesDescription": "managed in `/src/main/resources/static`",
        "deploymentConfiguration": "Deployment Configuration",
        "deploymentConfigurationDescription": "Packaged as executable JAR files, environment-specific settings separated with application-*.properties, performance optimization, etc.",
        "jar": "JAR",
        "properties": "application-*.properties",
        "performanceOptimization": "Performance Optimization"
      },
      "futureImprovements": {
        "title": "Future Improvements",
        "mobileAppIntegration": "Mobile App Integration",
        "realTimeNotificationSystem": "Real-time Notification System Enhancement",
        "aiFunction": "AI-based Exercise Posture Analysis",
        "socialLogin": "Social Login Integration",
        "mobileAppIntegrationDescription": "Extending REST API and supporting mobile clients",
        "realTimeNotificationSystemDescription": "Enhancing WebSocket-based notifications",
        "aiFunctionDescription": "Considering addition of exercise posture analysis and feedback features",
        "socialLoginDescription": "Integrating external authentication with Kakao, Google, etc."
      },
      "closing": {
        "title": "7. Conclusion",
        "description": "The WORK OUT project goes beyond a simple information sharing community, integrating various technologies such as real-time video training using `WebRTC` and `WebSocket`, a stable system based on `Spring Boot`, and security through `Spring Security` to provide a differentiated experience. We will continue to improve to provide better services in the future. The experience and know-how gained through this project will serve as a foundation for the development of more advanced services in the future."
      },
      "experience": {
        "title": "Experience WORK OUT",
        "preview": "Capu Blog Preview"
      },
      "serviceLinks": {
        "title": "Service Links",
        "ezpzService": "Go to EZPZ Service",
        "githubRepository": "GitHub Repository"
      },
      "errorController": {
        "undefinedStatusCode": "Undefined status code",
        "notFound": "The requested resource could not be found.",
        "internalError": "An internal server error occurred.",
        "defaultMessage": "Default HTTP status message"
      }
    },
    "codeComments": {
      "webRtc": {
        "comment1": "Start WebSocket connection attempt and prevent duplicate connections logic",
        "comment2": "Connect to the WebSocket endpoint ('/ws') using SockJS.",
        "comment3": "Disable STOMP client debug messages.",
        "comment4": "After successful connection, send a 'join' signal to announce room participation.",
        "comment5": "If connection fails, attempt reconnection after 5 seconds.",
        "comment6": "Function to send signaling messages via the STOMP client.",
        "comment7": "If WebSocket is not connected, log message sending failure.",
        "comment8": "Function to handle received signaling messages.",
        "comment9": "'join' message: Indicates a new participant has entered the room.",
        "comment10": "Create a PeerConnection for the new participant and instruct it to create an Offer.",
        "comment11": "'offer' message: Received an SDP Offer from another peer.",
        "comment12": "Log errors during Offer reception and processing.",
        "comment13": "'answer' message: Received an SDP Answer from another peer.",
        "comment14": "Log errors during Answer reception and processing.",
        "comment15": "'candidate' message: Received an ICE Candidate from another peer.",
        "comment16": "Log errors during ICE Candidate addition.",
        "comment17": "Function to create an RTCPeerConnection object for the specified remoteId.",
        "comment18": "Log the creation of a new PeerConnection.",
        "comment19": "Indicate in the log whether an Offer needs to be created.",
        "comment20": "Close the existing PeerConnection if it exists.",
        "comment21": "If a local media stream exists, add each track to the new PeerConnection.",
        "comment22": "Log the addition of local stream tracks.",
        "comment23": "Set the callback function to be called when an ICE Candidate is generated. Send the generated Candidate to the peer.",
        "comment24": "Set the callback function to be called when a media track is received from the remote peer.",
        "comment25": "Log the reception of a remote track.",
        "comment26": "Handling logic if the HTML element for remote video is missing (commented out).",
        "comment27": "Log the setting of the remote video stream.",
        "comment28": "Set the callback function to log ICE connection state changes.",
        "comment29": "If an Offer needs to be created, create the Offer, set it as the Local Description, and send it to the peer.",
        "comment30": "Log errors during Offer creation and sending.",
        "comment31": "Initialization logic after DOM loading is complete.",
        "initEvent": "If roomId exists on page load, initiate WebSocket connection."
      },
      "boardSearch": {
        "qBoardComment": "Create a QBoard object to prepare for type-safe query writing.",
        "queryComment": "Create a JPQLQuery object and set the basic FROM clause.",
        "basicCondition": "If the keyword exists and is not empty, add a condition where the title contains the keyword.",
        "dynamicCondition": "Add a basic condition where the board number (bno) is greater than 0L. (Example: target all posts)"
      },
      "booleanBuilder": {
        "comment1": "Create a BooleanBuilder object to combine dynamic conditions.",
        "comment2": "Split the search type string (e.g., 'tcw') into individual characters.",
        "comment3": "If the search type and keyword are valid, create an inner BooleanBuilder to group OR conditions.",
        "comment4": "'t': Add a condition where the title contains the keyword using OR.",
        "comment5": "'c': Add a condition where the content contains the keyword using OR.",
        "comment6": "'w': Add a condition where the writer's username contains the keyword using OR.",
        "comment7": "Combine the internally OR-ed conditions with the main BooleanBuilder using AND.",
        "comment8": "Skip this block if search type/keyword is missing.",
        "comment9": "Apply the finally constructed BooleanBuilder condition to the WHERE clause of the JPQLQuery."
      },
      "security": {
        "comment1": "Set the redirection URL to '/member/login?expired' upon session expiration.",
        "comment2": "Disable CSRF protection for specific paths ('/member/login', '/member/join', etc.).",
        "comment3": "Service method for updating member information."
      },
      "memberManagement": {
        "findExistingMember": "Query existing member information (throws an exception if not found)",
        "passwordEncryption": "Password encryption processing when changing passwords",
        "selectiveUpdate": "Selectively update only changed fields",
        "otherFieldsUpdate": "Update other fields",
        "transactionSave": "Save within a transaction",
        "enableMethodSecurity": "Use @EnableMethodSecurity in newer versions",
        "pathAccessControl": "Add path-specific access control as needed",
        "exceptionHandlers": "Add access denial/authentication failure handlers as needed"
      },
      "fileUpload": {
        "comment2": "Perform validation check if QnA title is empty and return an error response.",
        "comment3": "Call the QnA service's register method to register QnA information along with attached files.",
        "comment4": "Upon successful registration, return an HTTP 200 OK response including the saved QnaDTO object."
      },
      "uploadConfig": {
        "comment1": "Inject the value of the 'org.zerock.upload.path' property from application.properties or application.yml.",
        "comment2": "During bean initialization (@PostConstruct), check if the upload path exists and create it if not."
      },
      "fileStorage": {
        "comment1": "Ensure atomicity by wrapping the entire method in a single transaction.",
        "comment2": "Create a Qna entity from QnaDTO and save it to the database.",
        "comment3": "Start processing logic if attached image files exist.",
        "comment4": "Extract the extension from the original filename and generate a unique stored filename using UUID.",
        "comment5": "Use the MultipartFile object's transferTo method to actually save the file to the specified path.",
        "comment6": "Create a QnaImage entity based on the saved filename.",
        "comment7": "Add the created QnaImage entity to the Qna entity's image list (JPA relationship setting).",
        "comment8": "Save the Qna entity again with the added image information to reflect changes in the database.",
        "comment9": "Convert the finally saved Qna entity to QnaDTO and return it."
      },
      "fileAccess": {
        "comment1": "GET request handler for retrieving the image file corresponding to a specific image ID.",
        "comment2": "Service method to retrieve the image resource based on the image ID.",
        "comment3": "Use QnaImageRepository to retrieve the QnaImage entity by image ID. Throws EntityNotFoundException if not found.",
        "comment4": "Combine the configured upload path and image filename to create the actual file Path object.",
        "comment5": "Convert the file path to URI, create a UrlResource object to represent the resource. Check if the file exists and is readable.",
        "getImageResource": "Call the service to retrieve the image resource",
        "determineMimeType": "Determine the MIME type of the resource",
        "returnImageResource": "Return image resource and Content-Type header",
        "notFoundResponse": "404 response",
        "serverErrorResponse": "500 response"
      },
      "frontend": {
        "comment1": "Register the form submission event listener.",
        "comment2": "Prevent the default form submission behavior (page refresh).",
        "comment3": "Create a FormData object to hold form data including files.",
        "comment4": "Append text input field values (title, content) to FormData.",
        "comment5": "Append all selected files from the file input (imageFiles) to FormData.",
        "comment6": "Get the CSRF token and header name from Thymeleaf variables or JavaScript variables.",
        "comment7": "Send a POST request to '/qna/api/register' using the fetch API. Include FormData and CSRF header.",
        "comment8": "Upon successful registration, redirect to the QnA detail view page using the returned qno.",
        "comment9": "Function to update the image preview when files are selected.",
        "comment10": "Clear the existing preview content.",
        "comment11": "For each file, use FileReader to read image data and create preview elements to display on the screen.",
        "comment12": "Current logged-in user information (null in this example).",
        "successProcessing": "Processing on success",
        "registrationError": "An error occurred during registration"
      },
       "webMvcConfig": {
         "cacheDisable": "Disable favicon cache. (For reflecting changes immediately during development)"
      },
      "dataModeling": {
        "otherCommonFields": "In addition to creation and modification timestamps, other common fields such as deletion flags or status codes can be added as needed.",
        "otherFields": "Beyond entity relationships and core attributes, additional fields like tags, categories, likes, etc. can be added according to business requirements.",
        "mappedSuperclass": "Used as a parent class for inheritance mapping in JPA. It doesn't create an actual table but provides mapping information to child entity classes.",
        "entityListeners": "Specifies listeners that detect entity lifecycle events and call callback methods. AuditingEntityListener automatically manages creation and modification timestamps.",
        "createdDate": "Marks a field that automatically stores the current time when an entity is created. Uses Spring Data JPA Auditing feature.",
        "lastModifiedDate": "Marks a field that automatically updates to the current time when an entity is modified. Uses Spring Data JPA Auditing feature.",
        "entity": "Indicates that this class is a JPA entity and is mapped to a connected database table.",
        "id": "Marks the primary key of the entity.",
        "generatedValue": "Specifies the strategy for generating primary key values. The default value is AUTO, which chooses an appropriate strategy based on the database.",
        "manyToOne": "Sets up a Many-to-One (N:1) relationship. Used when multiple entities reference a single entity.",
        "oneToMany": "Sets up a One-to-Many (1:N) relationship. Used when a single entity references multiple entities.",
        "mappedBy": "In a bidirectional relationship, specifies the owner from the non-owning side. Here, the board field in the Board entity is the owner of the relationship."
      },
       "errorController": {
        "undefinedStatusCode": "Undefined status code",
        "notFound": "The requested resource could not be found.",
        "internalError": "An internal server error occurred.",
        "defaultMessage": "Default HTTP status message"
      }
    }
  }
} 